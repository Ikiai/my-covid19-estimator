{"version":3,"sources":["covid.jpeg","../../estimator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","covid19ImpactEstimator","data","periodType","timeToElapse","console","log","factor","impact","currentlyInfected","reportedCases","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","totalHospitalBeds","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","region","avgDailyIncomeInUSD","avgDailyIncomePopulation","severeImpact","covid","require","App","state","submitted","onSubmit","event","preventDefault","population","parseInt","value","name","avgAge","setState","style","listStyleType","this","Math","trunc","toLocaleString","backgroundColor","padding","paddingLeft","height","src","alt","width","type","ref","input","float","renderestimation","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b7986fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.30f3fcc3.jpeg\";","const covid19ImpactEstimator = (data) => {\n  if (data.periodType === 'days') {\n    let factor = data.timeToElapse / 3;\n  } else if (data.periodType === 'months') {\n    let factor = (data.timeToElapse * 30) / 3;\n  } else if (data.periodType === 'years') {\n    let factor = (data.timeToElapse * 360) / 3;\n  } else {\n    console.log('error');\n  }\n  const factor = data.timeToElapse / 3;\n  const impact = {};\n  impact.currentlyInfected = data.reportedCases * 10;\n  impact.infectionsByRequestedTime = impact.currentlyInfected * 2 ** factor;\n  impact.severeCasesByRequestedTime = impact.infectionsByRequestedTime * 0.15;\n  impact.hospitalBedsByRequestedTime =\n    data.totalHospitalBeds * 0.35 - impact.severeCasesByRequestedTime;\n  impact.casesForICUByRequestedTime = impact.infectionsByRequestedTime * 0.05;\n  impact.casesForVentilatorsByRequestedTime =\n    impact.infectionsByRequestedTime * 0.02;\n  impact.dollarsInFlight =\n    impact.infectionsByRequestedTime *\n    data.timeToElapse *\n    data.region.avgDailyIncomeInUSD *\n    data.region.avgDailyIncomePopulation;\n\n  const severeImpact = {};\n  severeImpact.currentlyInfected = data.reportedCases * 50;\n  severeImpact.infectionsByRequestedTime =\n    severeImpact.currentlyInfected * 2 ** factor;\n  severeImpact.severeCasesByRequestedTime =\n    severeImpact.infectionsByRequestedTime * 0.15;\n  severeImpact.hospitalBedsByRequestedTime =\n    data.totalHospitalBeds * 0.35 - severeImpact.severeCasesByRequestedTime;\n  severeImpact.casesForICUByRequestedTime =\n    severeImpact.infectionsByRequestedTime * 0.05;\n  severeImpact.casesForVentilatorsByRequestedTime =\n    severeImpact.infectionsByRequestedTime * 0.02;\n  severeImpact.dollarsInFlight =\n    severeImpact.infectionsByRequestedTime *\n    data.timeToElapse *\n    data.region.avgDailyIncomeInUSD *\n    data.region.avgDailyIncomePopulation;\n\n  return { data: data, impact: impact, severeImpact: severeImpact };\n};\nexport default covid19ImpactEstimator;\n","import React, { Component } from 'react';\nimport covid19ImpactEstimator from 'estimator/src/estimator';\n\nconst covid = require('./covid.jpeg');\nclass App extends Component {\n  state = {\n    data: {},\n    submitted: false\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    const population = parseInt(this.population.value);\n    const timeToElapse = parseInt(this.timeToElapse.value);\n    const reportedCases = parseInt(this.reportedCases.value);\n    const totalHospitalBeds = parseInt(this.totalHospitalBeds.value);\n    const periodType = this.periodType.value;\n    const data = {\n      region: {\n        name: 'Africa',\n        avgAge: 19.7,\n        avgDailyIncomeInUSD: 5,\n        avgDailyIncomePopulation: 0.71\n      },\n      periodType: periodType,\n      timeToElapse: timeToElapse,\n      reportedCases: reportedCases,\n      population: population,\n      totalHospitalBeds: totalHospitalBeds\n    };\n\n    this.setState({ data, submitted: true });\n    covid19ImpactEstimator(data);\n  };\n  renderestimation() {\n    return (\n      <div>\n        <div>\n          Input:{' '}\n          <ul style={{ listStyleType: 'none' }}>\n            <li>Region: {this.state.data.region.name}</li>\n            <li>Average age:{this.state.data.region.avgAge}</li>\n            <li>\n              Average Daily Income in USD:{' '}\n              {this.state.data.region.avgDailyIncomeInUSD}\n            </li>\n            <li>\n              Average daily Income Population:{' '}\n              {this.state.data.region.avgDailyIncomePopulation}\n            </li>\n            <li>Period Type: {this.state.data.periodType}</li>\n            <li>Time to elapse: {this.state.data.timeToElapse}</li>\n            <li>Number of reported cases: {this.state.data.reportedCases}</li>\n            <li>Population: {this.state.data.population}</li>\n            <li>\n              Total number of hospital beds: {this.state.data.totalHospitalBeds}\n            </li>\n          </ul>\n        </div>\n        <div>\n          Impact:{' '}\n          <ul style={{ listStyleType: 'none' }}>\n            <li>\n              Currently Infected:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact.currentlyInfected\n              ).toLocaleString()}\n            </li>\n            <li>\n              Infections by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact\n                  .infectionsByRequestedTime\n              ).toLocaleString()}\n            </li>\n            <li>\n              Severe Cases by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact\n                  .severeCasesByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Hospital Beds by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact\n                  .hospitalBedsByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Cases for ICU by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact\n                  .casesForICUByRequestedTime\n              ).toLocaleString()}\n            </li>\n            <li>\n              Cases for ventilators by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact\n                  .casesForVentilatorsByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Dollars in flight:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).impact.dollarsInFlight\n              ).toLocaleString()}{' '}\n            </li>\n          </ul>\n        </div>\n        <div>\n          SevereImpact:{' '}\n          <ul style={{ listStyleType: 'none' }}>\n            <li>\n              Currently Infected:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .currentlyInfected\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Infections by requested time:\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .infectionsByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Severe cases by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .severeCasesByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Hospital beds by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .hospitalBedsByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Cases for ICU by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .casesForICUByRequestedTime\n              ).toLocaleString()}{' '}\n            </li>\n            <li>\n              Cases for Ventilators by requested time:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .casesForVentilatorsByRequestedTime\n              ).toLocaleString()}\n            </li>\n            <li>\n              Dollars in flight:{' '}\n              {Math.trunc(\n                covid19ImpactEstimator(this.state.data).severeImpact\n                  .dollarsInFlight\n              ).toLocaleString()}{' '}\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.submitted === false) {\n      return (\n        <div>\n          <div\n            style={{\n              backgroundColor: 'grey',\n              padding: '5%',\n              paddingLeft: '10%',\n              height: '650px'\n            }}\n          >\n            <img src={covid} alt=\"\" width=\"300px\" style={{}} />\n            <form onSubmit={this.onSubmit}>\n              <h1>COVID-19-ESTIMATOR</h1>\n              <div>\n                <legend>Population</legend>\n                <input\n                  type=\"data-population\"\n                  ref={(input) => (this.population = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Time to Elapse</legend>\n                <input\n                  type=\"data-time-to-elapse\"\n                  ref={(input) => (this.timeToElapse = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Reported Cases</legend>\n                <input\n                  type=\"data-reported-cases\"\n                  ref={(input) => (this.reportedCases = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Total Hospital Beds</legend>\n                <input\n                  type=\"data-hospital-beds\"\n                  ref={(input) => (this.totalHospitalBeds = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Period Type</legend>\n                <select\n                  type=\"data-period-type\"\n                  ref={(input) => (this.periodType = input)}\n                >\n                  <option>days</option>\n                  <option>weeks</option>\n                  <option>months</option>\n                </select>\n              </div>\n              <button type=\"data-go-estimate\">Go Estimate</button>\n            </form>\n          </div>\n        </div>\n      );\n    }\n    if (this.state.submitted === true) {\n      return (\n        <div>\n          <div\n            style={{\n              backgroundColor: 'rgba(255, 255, 255, 0.781)',\n              float: 'right',\n              padding: '10%',\n              height: '500px'\n            }}\n          >\n            {this.renderestimation()}\n          </div>\n          <div\n            style={{\n              backgroundColor: 'grey',\n              padding: '5%',\n              height: '650px'\n            }}\n          >\n            <img src={covid} alt=\"\" width=\"300px\" style={{}} />\n            <form onSubmit={this.onSubmit}>\n              <h1>COVID-19-ESTIMATOR</h1>\n              <div>\n                <legend>Population</legend>\n                <input\n                  type=\"data-population\"\n                  ref={(input) => (this.population = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Time to Elapse</legend>\n                <input\n                  type=\"data-time-to-elapse\"\n                  ref={(input) => (this.timeToElapse = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Reported Cases</legend>\n                <input\n                  type=\"data-reported-cases\"\n                  ref={(input) => (this.reportedCases = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Total Hospital Beds</legend>\n                <input\n                  type=\"data-hospital-beds\"\n                  ref={(input) => (this.totalHospitalBeds = input)}\n                ></input>\n              </div>\n              <div>\n                <legend>Period Type</legend>\n                <select\n                  type=\"data-period-type\"\n                  ref={(input) => (this.periodType = input)}\n                >\n                  <option>days</option>\n                  <option>weeks</option>\n                  <option>months</option>\n                </select>\n              </div>\n              <button type=\"data-go-estimate\">Go Estimate</button>\n            </form>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      // const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}